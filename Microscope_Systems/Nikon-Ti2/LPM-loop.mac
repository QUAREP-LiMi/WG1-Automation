//
// Copyright 2022 Nasser Darwish Miranda

// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions 
// are met:

// 1. Redistributions of source code must retain the above copyright notice, this list of conditions 
// and the following disclaimer.

// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
// and the following disclaimer in the documentation and/or other materials provided with the 
// distribution.

// 3. Neither the name of the copyright holder nor the names of its contributors may be used to 
// endorse or promote products derived from this software without specific prior written 
// permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
// OF SUCH DAMAGE.
	
char output[512];
char script[512];

char * baseScript;
char * path = "D:\FACILITY\LPM_output\output";
char * extension = ".csv ";

int duration; //duration in seconds
int avgTime; //Averaging time
int wavelengths[7];
int line[7];
int filter[7];
int lambdaInd;
int buff;

int powerSetting;

// Choose the light path on the panel:

// Position 1 -> Eyepiece DIA
// Position 2 -> Eyepiece EPI (use this one to skip camera)
Stg_SetLightPathPosition(2);
// Position 3 -> Qi2 DIA
// Position 4 -> Qi2 EPI

wavelengths[0] = 390;
wavelengths[1] = 440;
wavelengths[2] = 475;
wavelengths[3] = 555;
wavelengths[4] = 575;
wavelengths[5] = 635;
wavelengths[6] = 740;

line[0] = 0;
line[1] = 1;
line[2] = 2;  
line[3] = 4;
line[4] = 5;
line[5] = 6;
line[6] = 7;

filter[0] = 0;
filter[1] = 0;
filter[2] = 1;
filter[3] = 2;
filter[4] = 2;
filter[5] = 3;
filter[6] = 4;

duration     = 60;   //Duration per wavelength, in seconds
powerSetting = 100;   //Power percentage applied
avgTime      = 1;   //Average time

//0-5
for(lambdaInd = 0; lambdaInd < 7; ++lambdaInd)
   {

   baseScript = "cmd.exe /C C:\Miniconda3\python.exe D:\FACILITY\LPM-PythonScriptsAndDependencies\measurePowers.pyw";
   
   sprintf(script,"%s %d %s%d%s %d %d", "baseScript, wavelengths[lambdaInd], path, wavelengths[lambdaInd], extension, duration, avgTime");
   
   Stg_Filter_SetPosition("Turret-Lo", filter[lambdaInd]);
   Stg_SetMultiLaserLineUsed("SpectraIII", line[lambdaInd], 1); // Open shutter
   //Stg_SetMultiLaserPower("SpectraIII", line[lambdaInd], 25.00);
   Stg_SetMultiLaserPower("SpectraIII", line[lambdaInd], powerSetting);
   Stg_SetShutterStateEx("SpectraIII", 1);
   
   // Start Thorlabs PM
   Int_ExecProgram(script);
   
   Wait(duration);
   
   Stg_SetShutterStateEx("SpectraIII", 0);
   Stg_SetMultiLaserLineUsed("SpectraIII", line[lambdaInd], 0); // Close shutter
   Stg_SetMultiLaserPower("SpectraIII", line[lambdaInd], 0.00);
}

//buff = wavelengths[lambdaInd];

sprintf(output,"%s", "script");
Int_CreateWindow(WND_1,"sprintf example",0, 0, 0, 450, 560,"Header:\n\n",1,1,0.00000,1,1,1,"Arial,B,8");
Int_SetWindowText(WND_1, output, TRUE);

ï¿½
